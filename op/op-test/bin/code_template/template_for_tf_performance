#!/usr/bin/env python
# -*- coding: UTF-8 -*-
################################################################################
#
# Copyright (c) 2019 Baidu.com, Inc. All Rights Reserved
#
################################################################################
"""
this code is automatically generated
Authors: xuguangyao01(xuguangyao01@baidu.com)
"""

import unittest
import tensorflow as tf
import numpy
import traceback
import sys
import os
import time
import json


class MyTest(unittest.TestCase):
    def test_run(self):
        """ define var """
{0}

        """ define tf-op """
{1}

        sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True, device_count={2}))
        sess.run(tf.compat.v1.global_variables_initializer())
        sess.run(tf.compat.v1.local_variables_initializer())
        performance = []
        for i in range(100):
            begin_time = time.time()
            {3}
            end_time = time.time()
            performance.append(end_time - begin_time)
        sorted_performance = sorted(performance)
        avg_performance = sum(sorted_performance[5:85])/80
        print sorted_performance
        print avg_performance
        result["tf_performance"] = avg_performance


    def test_run_forward(self):
        """ define var """
{0}

        """ define tf-op """
{4}

        sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(log_device_placement=True, device_count={2}))
        sess.run(tf.compat.v1.global_variables_initializer())
        sess.run(tf.compat.v1.local_variables_initializer())
        performance = []
        for i in range(100):
            begin_time = time.time()
            {5}
            end_time = time.time()
            performance.append(end_time - begin_time)
        sorted_performance = sorted(performance)
        avg_performance = sum(sorted_performance[5:85])/80
        print sorted_performance
        print avg_performance
        result["tf_performance_forward"] = avg_performance


    def tearDown(self):
        with open("{{}}.result".format(sys.argv[0][:-3]), "w") as f:
            json.dump(result, f, indent=4)


if __name__ == '__main__':
    if os.path.exists("{{}}.result".format(sys.argv[0][:-3])):
        with open("{{}}.result".format(sys.argv[0][:-3]), "r") as f:
            result = json.load(f)
    else:
        result = {{"tf_performance":"-", "tf_performance_forward":"-"}}
    #unittest.main()
    suite = unittest.TestSuite()
    if sys.argv[1] == "both":
        suite.addTest(MyTest("test_run"))
    elif sys.argv[1] == "forward":
        suite.addTest(MyTest("test_run_forward"))
    unittest.TextTestRunner(verbosity=2).run(suite)
